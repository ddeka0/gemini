// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: messages.proto
#ifndef GRPC_messages_2eproto__INCLUDED
#define GRPC_messages_2eproto__INCLUDED

#include "messages.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace chordMsg {

class ChordService final {
 public:
  static constexpr char const* service_full_name() {
    return "chordMsg.ChordService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getPredecessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::chordMsg::NodeAddr* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>> AsyncgetPredecessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>>(AsyncgetPredecessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>> PrepareAsyncgetPredecessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>>(PrepareAsyncgetPredecessorRaw(context, request, cq));
    }
    virtual ::grpc::Status FindSuccessor(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::chordMsg::NodeAddr* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>> AsyncFindSuccessor(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>>(AsyncFindSuccessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>> PrepareAsyncFindSuccessor(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>>(PrepareAsyncFindSuccessorRaw(context, request, cq));
    }
    virtual ::grpc::Status getSuccessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::chordMsg::NodeAddr* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>> AsyncgetSuccessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>>(AsyncgetSuccessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>> PrepareAsyncgetSuccessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>>(PrepareAsyncgetSuccessorRaw(context, request, cq));
    }
    virtual ::grpc::Status ClosestPrecedingNode(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::chordMsg::NodeAddr* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>> AsyncClosestPrecedingNode(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>>(AsyncClosestPrecedingNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>> PrepareAsyncClosestPrecedingNode(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>>(PrepareAsyncClosestPrecedingNodeRaw(context, request, cq));
    }
    virtual ::grpc::Status Notify(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::chordMsg::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>> AsyncNotify(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>>(AsyncNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>> PrepareAsyncNotify(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>>(PrepareAsyncNotifyRaw(context, request, cq));
    }
    virtual ::grpc::Status LookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::chordMsg::KeyValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>> AsyncLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>>(AsyncLookUpKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>> PrepareAsyncLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>>(PrepareAsyncLookUpKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status FinalLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::chordMsg::KeyValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>> AsyncFinalLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>>(AsyncFinalLookUpKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>> PrepareAsyncFinalLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>>(PrepareAsyncFinalLookUpKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status InsertKeyValue(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::chordMsg::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>> AsyncInsertKeyValue(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>>(AsyncInsertKeyValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>> PrepareAsyncInsertKeyValue(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>>(PrepareAsyncInsertKeyValueRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getPredecessor(::grpc::ClientContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPredecessor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindSuccessor(::grpc::ClientContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindSuccessor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSuccessor(::grpc::ClientContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSuccessor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClosestPrecedingNode(::grpc::ClientContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClosestPrecedingNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Notify(::grpc::ClientContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Notify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LookUpKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::KeyValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FinalLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FinalLookUpKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::KeyValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertKeyValue(::grpc::ClientContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertKeyValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::Empty* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>* AsyncgetPredecessorRaw(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>* PrepareAsyncgetPredecessorRaw(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>* AsyncFindSuccessorRaw(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>* PrepareAsyncFindSuccessorRaw(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>* AsyncgetSuccessorRaw(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>* PrepareAsyncgetSuccessorRaw(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>* AsyncClosestPrecedingNodeRaw(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::NodeAddr>* PrepareAsyncClosestPrecedingNodeRaw(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>* AsyncNotifyRaw(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>* PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>* AsyncLookUpKeyRaw(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>* PrepareAsyncLookUpKeyRaw(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>* AsyncFinalLookUpKeyRaw(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::KeyValue>* PrepareAsyncFinalLookUpKeyRaw(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>* AsyncInsertKeyValueRaw(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chordMsg::Empty>* PrepareAsyncInsertKeyValueRaw(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getPredecessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::chordMsg::NodeAddr* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>> AsyncgetPredecessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>>(AsyncgetPredecessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>> PrepareAsyncgetPredecessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>>(PrepareAsyncgetPredecessorRaw(context, request, cq));
    }
    ::grpc::Status FindSuccessor(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::chordMsg::NodeAddr* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>> AsyncFindSuccessor(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>>(AsyncFindSuccessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>> PrepareAsyncFindSuccessor(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>>(PrepareAsyncFindSuccessorRaw(context, request, cq));
    }
    ::grpc::Status getSuccessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::chordMsg::NodeAddr* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>> AsyncgetSuccessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>>(AsyncgetSuccessorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>> PrepareAsyncgetSuccessor(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>>(PrepareAsyncgetSuccessorRaw(context, request, cq));
    }
    ::grpc::Status ClosestPrecedingNode(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::chordMsg::NodeAddr* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>> AsyncClosestPrecedingNode(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>>(AsyncClosestPrecedingNodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>> PrepareAsyncClosestPrecedingNode(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>>(PrepareAsyncClosestPrecedingNodeRaw(context, request, cq));
    }
    ::grpc::Status Notify(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::chordMsg::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>> AsyncNotify(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>>(AsyncNotifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>> PrepareAsyncNotify(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>>(PrepareAsyncNotifyRaw(context, request, cq));
    }
    ::grpc::Status LookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::chordMsg::KeyValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>> AsyncLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>>(AsyncLookUpKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>> PrepareAsyncLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>>(PrepareAsyncLookUpKeyRaw(context, request, cq));
    }
    ::grpc::Status FinalLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::chordMsg::KeyValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>> AsyncFinalLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>>(AsyncFinalLookUpKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>> PrepareAsyncFinalLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>>(PrepareAsyncFinalLookUpKeyRaw(context, request, cq));
    }
    ::grpc::Status InsertKeyValue(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::chordMsg::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>> AsyncInsertKeyValue(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>>(AsyncInsertKeyValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>> PrepareAsyncInsertKeyValue(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>>(PrepareAsyncInsertKeyValueRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getPredecessor(::grpc::ClientContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) override;
      void getPredecessor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) override;
      void FindSuccessor(::grpc::ClientContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) override;
      void FindSuccessor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) override;
      void getSuccessor(::grpc::ClientContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) override;
      void getSuccessor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) override;
      void ClosestPrecedingNode(::grpc::ClientContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) override;
      void ClosestPrecedingNode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::NodeAddr* response, std::function<void(::grpc::Status)>) override;
      void Notify(::grpc::ClientContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response, std::function<void(::grpc::Status)>) override;
      void Notify(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::Empty* response, std::function<void(::grpc::Status)>) override;
      void LookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response, std::function<void(::grpc::Status)>) override;
      void LookUpKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::KeyValue* response, std::function<void(::grpc::Status)>) override;
      void FinalLookUpKey(::grpc::ClientContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response, std::function<void(::grpc::Status)>) override;
      void FinalLookUpKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::KeyValue* response, std::function<void(::grpc::Status)>) override;
      void InsertKeyValue(::grpc::ClientContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response, std::function<void(::grpc::Status)>) override;
      void InsertKeyValue(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::chordMsg::Empty* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>* AsyncgetPredecessorRaw(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>* PrepareAsyncgetPredecessorRaw(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>* AsyncFindSuccessorRaw(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>* PrepareAsyncFindSuccessorRaw(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>* AsyncgetSuccessorRaw(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>* PrepareAsyncgetSuccessorRaw(::grpc::ClientContext* context, const ::chordMsg::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>* AsyncClosestPrecedingNodeRaw(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::NodeAddr>* PrepareAsyncClosestPrecedingNodeRaw(::grpc::ClientContext* context, const ::chordMsg::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>* AsyncNotifyRaw(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>* PrepareAsyncNotifyRaw(::grpc::ClientContext* context, const ::chordMsg::NodeAddr& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>* AsyncLookUpKeyRaw(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>* PrepareAsyncLookUpKeyRaw(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>* AsyncFinalLookUpKeyRaw(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::KeyValue>* PrepareAsyncFinalLookUpKeyRaw(::grpc::ClientContext* context, const ::chordMsg::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>* AsyncInsertKeyValueRaw(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chordMsg::Empty>* PrepareAsyncInsertKeyValueRaw(::grpc::ClientContext* context, const ::chordMsg::KeyValue& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getPredecessor_;
    const ::grpc::internal::RpcMethod rpcmethod_FindSuccessor_;
    const ::grpc::internal::RpcMethod rpcmethod_getSuccessor_;
    const ::grpc::internal::RpcMethod rpcmethod_ClosestPrecedingNode_;
    const ::grpc::internal::RpcMethod rpcmethod_Notify_;
    const ::grpc::internal::RpcMethod rpcmethod_LookUpKey_;
    const ::grpc::internal::RpcMethod rpcmethod_FinalLookUpKey_;
    const ::grpc::internal::RpcMethod rpcmethod_InsertKeyValue_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response);
    virtual ::grpc::Status FindSuccessor(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response);
    virtual ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response);
    virtual ::grpc::Status ClosestPrecedingNode(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response);
    virtual ::grpc::Status Notify(::grpc::ServerContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response);
    virtual ::grpc::Status LookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response);
    virtual ::grpc::Status FinalLookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response);
    virtual ::grpc::Status InsertKeyValue(::grpc::ServerContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getPredecessor() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getPredecessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPredecessor(::grpc::ServerContext* context, ::chordMsg::Empty* request, ::grpc::ServerAsyncResponseWriter< ::chordMsg::NodeAddr>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FindSuccessor() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindSuccessor(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindSuccessor(::grpc::ServerContext* context, ::chordMsg::Id* request, ::grpc::ServerAsyncResponseWriter< ::chordMsg::NodeAddr>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getSuccessor() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSuccessor(::grpc::ServerContext* context, ::chordMsg::Empty* request, ::grpc::ServerAsyncResponseWriter< ::chordMsg::NodeAddr>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClosestPrecedingNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ClosestPrecedingNode() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ClosestPrecedingNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestPrecedingNode(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClosestPrecedingNode(::grpc::ServerContext* context, ::chordMsg::Id* request, ::grpc::ServerAsyncResponseWriter< ::chordMsg::NodeAddr>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Notify() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotify(::grpc::ServerContext* context, ::chordMsg::NodeAddr* request, ::grpc::ServerAsyncResponseWriter< ::chordMsg::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LookUpKey() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_LookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookUpKey(::grpc::ServerContext* context, ::chordMsg::Key* request, ::grpc::ServerAsyncResponseWriter< ::chordMsg::KeyValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FinalLookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FinalLookUpKey() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_FinalLookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinalLookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinalLookUpKey(::grpc::ServerContext* context, ::chordMsg::Key* request, ::grpc::ServerAsyncResponseWriter< ::chordMsg::KeyValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_InsertKeyValue() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_InsertKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertKeyValue(::grpc::ServerContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertKeyValue(::grpc::ServerContext* context, ::chordMsg::KeyValue* request, ::grpc::ServerAsyncResponseWriter< ::chordMsg::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getPredecessor<WithAsyncMethod_FindSuccessor<WithAsyncMethod_getSuccessor<WithAsyncMethod_ClosestPrecedingNode<WithAsyncMethod_Notify<WithAsyncMethod_LookUpKey<WithAsyncMethod_FinalLookUpKey<WithAsyncMethod_InsertKeyValue<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getPredecessor() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::chordMsg::Empty, ::chordMsg::NodeAddr>(
          [this](::grpc::ServerContext* context,
                 const ::chordMsg::Empty* request,
                 ::chordMsg::NodeAddr* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getPredecessor(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getPredecessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getPredecessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FindSuccessor() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::chordMsg::Id, ::chordMsg::NodeAddr>(
          [this](::grpc::ServerContext* context,
                 const ::chordMsg::Id* request,
                 ::chordMsg::NodeAddr* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FindSuccessor(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_FindSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindSuccessor(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FindSuccessor(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getSuccessor() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::chordMsg::Empty, ::chordMsg::NodeAddr>(
          [this](::grpc::ServerContext* context,
                 const ::chordMsg::Empty* request,
                 ::chordMsg::NodeAddr* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getSuccessor(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getSuccessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClosestPrecedingNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ClosestPrecedingNode() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::chordMsg::Id, ::chordMsg::NodeAddr>(
          [this](::grpc::ServerContext* context,
                 const ::chordMsg::Id* request,
                 ::chordMsg::NodeAddr* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ClosestPrecedingNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_ClosestPrecedingNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestPrecedingNode(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ClosestPrecedingNode(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Notify() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::chordMsg::NodeAddr, ::chordMsg::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::chordMsg::NodeAddr* request,
                 ::chordMsg::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Notify(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Notify(::grpc::ServerContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_LookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_LookUpKey() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::chordMsg::Key, ::chordMsg::KeyValue>(
          [this](::grpc::ServerContext* context,
                 const ::chordMsg::Key* request,
                 ::chordMsg::KeyValue* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->LookUpKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_LookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FinalLookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FinalLookUpKey() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::chordMsg::Key, ::chordMsg::KeyValue>(
          [this](::grpc::ServerContext* context,
                 const ::chordMsg::Key* request,
                 ::chordMsg::KeyValue* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FinalLookUpKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_FinalLookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinalLookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FinalLookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_InsertKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_InsertKeyValue() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::chordMsg::KeyValue, ::chordMsg::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::chordMsg::KeyValue* request,
                 ::chordMsg::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->InsertKeyValue(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_InsertKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertKeyValue(::grpc::ServerContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void InsertKeyValue(::grpc::ServerContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_getPredecessor<ExperimentalWithCallbackMethod_FindSuccessor<ExperimentalWithCallbackMethod_getSuccessor<ExperimentalWithCallbackMethod_ClosestPrecedingNode<ExperimentalWithCallbackMethod_Notify<ExperimentalWithCallbackMethod_LookUpKey<ExperimentalWithCallbackMethod_FinalLookUpKey<ExperimentalWithCallbackMethod_InsertKeyValue<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getPredecessor() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getPredecessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FindSuccessor() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindSuccessor(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getSuccessor() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClosestPrecedingNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ClosestPrecedingNode() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ClosestPrecedingNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestPrecedingNode(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Notify() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LookUpKey() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_LookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FinalLookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FinalLookUpKey() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_FinalLookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinalLookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InsertKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_InsertKeyValue() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_InsertKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertKeyValue(::grpc::ServerContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getPredecessor() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getPredecessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPredecessor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FindSuccessor() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindSuccessor(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindSuccessor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getSuccessor() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSuccessor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClosestPrecedingNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ClosestPrecedingNode() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ClosestPrecedingNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestPrecedingNode(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClosestPrecedingNode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Notify() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNotify(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LookUpKey() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_LookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLookUpKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FinalLookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FinalLookUpKey() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_FinalLookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinalLookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFinalLookUpKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_InsertKeyValue() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_InsertKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertKeyValue(::grpc::ServerContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertKeyValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getPredecessor() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getPredecessor(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getPredecessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getPredecessor(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FindSuccessor() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FindSuccessor(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FindSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindSuccessor(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FindSuccessor(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getSuccessor() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getSuccessor(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getSuccessor(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClosestPrecedingNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ClosestPrecedingNode() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ClosestPrecedingNode(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ClosestPrecedingNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClosestPrecedingNode(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ClosestPrecedingNode(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Notify() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Notify(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Notify(::grpc::ServerContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Notify(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_LookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_LookUpKey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->LookUpKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_LookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void LookUpKey(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FinalLookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FinalLookUpKey() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FinalLookUpKey(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FinalLookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FinalLookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FinalLookUpKey(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_InsertKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_InsertKeyValue() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->InsertKeyValue(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_InsertKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertKeyValue(::grpc::ServerContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void InsertKeyValue(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPredecessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getPredecessor() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::chordMsg::Empty, ::chordMsg::NodeAddr>(std::bind(&WithStreamedUnaryMethod_getPredecessor<BaseClass>::StreamedgetPredecessor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getPredecessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPredecessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPredecessor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chordMsg::Empty,::chordMsg::NodeAddr>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FindSuccessor() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::chordMsg::Id, ::chordMsg::NodeAddr>(std::bind(&WithStreamedUnaryMethod_FindSuccessor<BaseClass>::StreamedFindSuccessor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FindSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindSuccessor(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindSuccessor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chordMsg::Id,::chordMsg::NodeAddr>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSuccessor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getSuccessor() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::chordMsg::Empty, ::chordMsg::NodeAddr>(std::bind(&WithStreamedUnaryMethod_getSuccessor<BaseClass>::StreamedgetSuccessor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getSuccessor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSuccessor(::grpc::ServerContext* context, const ::chordMsg::Empty* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSuccessor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chordMsg::Empty,::chordMsg::NodeAddr>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClosestPrecedingNode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ClosestPrecedingNode() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::chordMsg::Id, ::chordMsg::NodeAddr>(std::bind(&WithStreamedUnaryMethod_ClosestPrecedingNode<BaseClass>::StreamedClosestPrecedingNode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ClosestPrecedingNode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClosestPrecedingNode(::grpc::ServerContext* context, const ::chordMsg::Id* request, ::chordMsg::NodeAddr* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClosestPrecedingNode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chordMsg::Id,::chordMsg::NodeAddr>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Notify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Notify() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::chordMsg::NodeAddr, ::chordMsg::Empty>(std::bind(&WithStreamedUnaryMethod_Notify<BaseClass>::StreamedNotify, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Notify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Notify(::grpc::ServerContext* context, const ::chordMsg::NodeAddr* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNotify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chordMsg::NodeAddr,::chordMsg::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LookUpKey() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::chordMsg::Key, ::chordMsg::KeyValue>(std::bind(&WithStreamedUnaryMethod_LookUpKey<BaseClass>::StreamedLookUpKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLookUpKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chordMsg::Key,::chordMsg::KeyValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FinalLookUpKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FinalLookUpKey() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::chordMsg::Key, ::chordMsg::KeyValue>(std::bind(&WithStreamedUnaryMethod_FinalLookUpKey<BaseClass>::StreamedFinalLookUpKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FinalLookUpKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FinalLookUpKey(::grpc::ServerContext* context, const ::chordMsg::Key* request, ::chordMsg::KeyValue* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFinalLookUpKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chordMsg::Key,::chordMsg::KeyValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertKeyValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_InsertKeyValue() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::chordMsg::KeyValue, ::chordMsg::Empty>(std::bind(&WithStreamedUnaryMethod_InsertKeyValue<BaseClass>::StreamedInsertKeyValue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InsertKeyValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertKeyValue(::grpc::ServerContext* context, const ::chordMsg::KeyValue* request, ::chordMsg::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertKeyValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chordMsg::KeyValue,::chordMsg::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getPredecessor<WithStreamedUnaryMethod_FindSuccessor<WithStreamedUnaryMethod_getSuccessor<WithStreamedUnaryMethod_ClosestPrecedingNode<WithStreamedUnaryMethod_Notify<WithStreamedUnaryMethod_LookUpKey<WithStreamedUnaryMethod_FinalLookUpKey<WithStreamedUnaryMethod_InsertKeyValue<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getPredecessor<WithStreamedUnaryMethod_FindSuccessor<WithStreamedUnaryMethod_getSuccessor<WithStreamedUnaryMethod_ClosestPrecedingNode<WithStreamedUnaryMethod_Notify<WithStreamedUnaryMethod_LookUpKey<WithStreamedUnaryMethod_FinalLookUpKey<WithStreamedUnaryMethod_InsertKeyValue<Service > > > > > > > > StreamedService;
};

}  // namespace chordMsg


#endif  // GRPC_messages_2eproto__INCLUDED
