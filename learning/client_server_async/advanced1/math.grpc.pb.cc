// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: math.proto

#include "math.pb.h"
#include "math.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mathlib {

static const char* Math_method_names[] = {
  "/mathlib.Math/Add",
  "/mathlib.Math/Sub",
};

std::unique_ptr< Math::Stub> Math::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Math::Stub> stub(new Math::Stub(channel));
  return stub;
}

Math::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Add_(Math_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Sub_(Math_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Math::Stub::Add(::grpc::ClientContext* context, const ::mathlib::MathRequest& request, ::mathlib::MathReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Add_, context, request, response);
}

void Math::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::mathlib::MathRequest* request, ::mathlib::MathReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

void Math::Stub::experimental_async::Add(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mathlib::MathReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Add_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mathlib::MathReply>* Math::Stub::AsyncAddRaw(::grpc::ClientContext* context, const ::mathlib::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mathlib::MathReply>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mathlib::MathReply>* Math::Stub::PrepareAsyncAddRaw(::grpc::ClientContext* context, const ::mathlib::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mathlib::MathReply>::Create(channel_.get(), cq, rpcmethod_Add_, context, request, false);
}

::grpc::Status Math::Stub::Sub(::grpc::ClientContext* context, const ::mathlib::MathRequest& request, ::mathlib::MathReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Sub_, context, request, response);
}

void Math::Stub::experimental_async::Sub(::grpc::ClientContext* context, const ::mathlib::MathRequest* request, ::mathlib::MathReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sub_, context, request, response, std::move(f));
}

void Math::Stub::experimental_async::Sub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mathlib::MathReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Sub_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::mathlib::MathReply>* Math::Stub::AsyncSubRaw(::grpc::ClientContext* context, const ::mathlib::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mathlib::MathReply>::Create(channel_.get(), cq, rpcmethod_Sub_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mathlib::MathReply>* Math::Stub::PrepareAsyncSubRaw(::grpc::ClientContext* context, const ::mathlib::MathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mathlib::MathReply>::Create(channel_.get(), cq, rpcmethod_Sub_, context, request, false);
}

Math::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Math_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Math::Service, ::mathlib::MathRequest, ::mathlib::MathReply>(
          std::mem_fn(&Math::Service::Add), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Math_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Math::Service, ::mathlib::MathRequest, ::mathlib::MathReply>(
          std::mem_fn(&Math::Service::Sub), this)));
}

Math::Service::~Service() {
}

::grpc::Status Math::Service::Add(::grpc::ServerContext* context, const ::mathlib::MathRequest* request, ::mathlib::MathReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Math::Service::Sub(::grpc::ServerContext* context, const ::mathlib::MathRequest* request, ::mathlib::MathReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mathlib

